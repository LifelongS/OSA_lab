#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

struct node {
   int data;
   int key;
   struct node *next;};

struct node *head = NULL;
struct node *current = NULL;

//отображение списка
void printList() {
   struct node *ptr = head;
   printf("\n[ ");
 
   //стартуем с самого начала
   while(ptr != NULL) {
      printf("(%d,%d) ",ptr->key,ptr->data);
      ptr = ptr->next;
   }
 
   printf(" ]");}

//вставка ссылки в самом первом месте
void insertFirst(int key, int data) {
   //create a link
   struct node *link = (struct node*) malloc(sizeof(struct node));
 
   link->key = key;
   link->data = data;
 
   //указываем на старый первый узел
   link->next = head;
 
   //сначала указываем новый первый узел
   head = link;}

//удаление первого элемента
struct node* deleteFirst() {

   //сохраняем ссылку на первое соединение
   struct node *tempLink = head;
 
   //отмечаем как первую следующую ссылку за первой    
head = head->next;
 
   //возвращаем удаленную ссылку
   return tempLink;}

//список пуст
bool isEmpty() {
   return head == NULL;
}

int length() {
   int length = 0;
   struct node *current;
 
   for(current = head; current != NULL; current = current->next) {
      length++;
   }
 
   return length;}
//поиск ссылки с заданным ключом
struct node* find(int key) {

   //начнем с первой ссылки
   struct node* current = head;

   //если список пуст
   if(head == NULL) {
      return NULL;
   }

   //навигация по списку
   while(current->key != key) {
 
      //если это последний узел
      if(current->next == NULL) {
         return NULL;
      } else {
         //переход по следующей ссылке
         current = current->next;
      }
   }      
 
   //если данные найдены, возвращаем текущую ссылку
   return current;
}

//удаление ссылки с заданным ключом
struct node* delete(int key) {

   //начинаем с первой ссылки
   struct node* current = head;
   struct node* previous = NULL;
 
   //если список пуст
   if(head == NULL) {
      return NULL;
   }

   //навигация по списку
   while(current->key != key) {

      //если это последний узел
      if(current->next == NULL) {
         return NULL;
      } else {
         //сохраним ссылку на текущее соединение
         previous = current;
         //перейдем к следующей ссылке
         current = current->next;
      }
   }

   //найдено совпадение, обновляем ссылку
   if(current == head) {
      //чтобы указать на следующую ссылку, сначала изменим 
      head = head->next;
   } else {
      //обойдем текущую ссылку
      previous->next = current->next;
   }    
 
   return current;
}

void sort() {
   int i, j, k, tempKey, tempData;
   struct node *current;
   struct node *next;
 
   int size = length();
   k = size ;
 
   for ( i = 0 ; i < size - 1 ; i++, k-- ) {
      current = head;
      next = head->next;
  
      for ( j = 1 ; j < k ; j++ ) {   

         if ( current->data > next->data ) {
            tempData = current->data;
            current->data = next->data;
            next->data = tempData;

            tempKey = current->key;
            current->key = next->key;
            next->key = tempKey;
         }
   
         current = current->next;
         next = next->next;
      }
   }   
}

void reverse(struct node** head_ref) {
   struct node* prev   = NULL;
   struct node* current = *head_ref;
   struct node* next;
 
   while (current != NULL) {
      next  = current->next;
      current->next = prev;   
      prev = current;
      current = next;
   }
 
   *head_ref = prev;
}

void main() {
   insertFirst(1,10);
   insertFirst(2,20);
   insertFirst(3,30);
   insertFirst(4,1);
   insertFirst(5,40);
   insertFirst(6,56); 

   printf("Original List: "); 
 
   //вывод список
   printList();

   while(!isEmpty()) {            
      struct node *temp = deleteFirst();
      printf("\nDeleted value:");
      printf("(%d,%d) ",temp->key,temp->data);
   }  
 
   printf("\nList after deleting all items: ");
   printList();
   insertFirst(1,10);
   insertFirst(2,20);
   insertFirst(3,30);
   insertFirst(4,1);
   insertFirst(5,40);
   insertFirst(6,56);
   
   printf("\nRestored List: ");
   printList();
   printf("\n");  

   struct node *foundLink = find(4);
 
   if(foundLink != NULL) {
      printf("Element found: ");
      printf("(%d,%d) ",foundLink->key,foundLink->data);
      printf("\n");  
   } else {
      printf("Element not found.");
   }

   delete(4);
   printf("List after deleting an item: ");
   printList();
   printf("\n");
   foundLink = find(4);
 
   if(foundLink != NULL) {
      printf("Element found: ");
      printf("(%d,%d) ",foundLink->key,foundLink->data);
      printf("\n");
   } else {
      printf("Element not found.");
   }
 
   printf("\n");
   sort();
 
   printf("List after sorting the data: ");
   printList();
 
   reverse(&head);
   printf("\nList after reversing the data: ");
   printList();
}
