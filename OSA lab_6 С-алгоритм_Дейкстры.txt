#include <limits.h>
#include <stdio.h>
#include <stdbool.h>

// Количество вершин в графе
#define V 10

// Служебная функция для нахождения вершины с минимальным значением расстояния от
// набора вершин, еще не включенных в набор-дерево кратчайших путей
int minDistance(int dist[], bool sptSet[]) {
    // Устанавливаем минимальное значение
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (sptSet[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

// Служебная функция для печати построенного массива
void printSolution(int dist[])
{
    printf("Vertex \t\t Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Функция, реализующая алгоритм кратчайшего пути Дейкстры из одного источника
// для графика, представленного матрицей смежности
void dijkstra(int graph[V][V], int src)
{
    int dist[V]; // The output array.  dist[i] will hold the shortest
    // расстояние от src до i

    bool sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest
    // проход дерева или кратчайшего расстояния от src до i завершен

    // Инициализируем все расстояния как БЕСКОНЕЧНЫЕ, а stpSet[] установливаем как false
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

    // Расстояние исходной вершины от самой себя всегда равно 0
    dist[src] = 0;

    // Поиск кратчайшего пути для всех вершин
    for (int count = 0; count < V - 1; count++) {
        // Выбираем вершину с минимальным расстоянием из множества ещё не обработанных вершин.
                // u всегда равно src на первом повторе.
        int u = minDistance(dist, sptSet);

        // Отмечаем выбранную вершину как обработанную
        sptSet[u] = true;

        // Обновление значения расстояния соседних вершин от выбранной вершины.
        for (int v = 0; v < V; v++)

            // Обновляем dist[v] только в том случае, если его нет в sptSet, 
            // если есть ребро от u до v, 
            // а общий вес пути от src до v через u меньше текущего значения dist[v]
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    // вывод построенного массива расстояний
    printSolution(dist);
}

//тестирование вышеуказанной функции
int main()
{
    /* создадим пример графа, описанного выше */
    int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0, 0 },
                           { 4, 0, 8, 0, 0, 0, 0, 11, 0, 0 },
                           { 0, 8, 0, 7, 0, 4, 0, 0, 2, 0 },
                           { 0, 0, 7, 0, 9, 14, 0, 0, 0, 0},
                           { 0, 0, 0, 9, 0, 10, 0, 0, 0, 0 },
                           { 0, 0, 4, 14, 10, 0, 2, 0, 0, 3 },
                           { 0, 0, 0, 0, 0, 2, 0, 1, 6, 0 },
                           { 8, 11, 0, 0, 0, 0, 1, 0, 7, 0 },
                           { 0, 0, 2, 0, 0, 0, 6, 7, 0, 5 },
                           { 0, 0, 0, 0, 0, 3, 0, 0, 5, 0 }, };


    dijkstra(graph, 0);

    return 0;
}